#!/bin/bash

# Ensure duti is installed
if ! command -v duti &> /dev/null; then
    echo "duti is not installed. Install it using: brew install duti"
    exit 1
fi

# Function to get pretty name from BUNDLE_ID
get_pretty_name() {
    local bundle_id="$1"
    local app_path=$(mdfind "kMDItemCFBundleIdentifier == '$bundle_id'" | head -n 1)
    if [[ -z "$app_path" ]]; then
        echo "Unknown Application"
    else
        mdls -name kMDItemDisplayName -raw "$app_path"
    fi
}

# Function to get BUNDLE_ID from pretty name
get_bundle_id() {
    local pretty_name="$1"
    # Use mdfind with a case-insensitive query for the display name
    local app_path=$(mdfind "kMDItemDisplayName == '$pretty_name'c" | head -n 1)
    if [[ -z "$app_path" ]]; then
        echo "Unknown Application"
    else
        mdls -name kMDItemCFBundleIdentifier -raw "$app_path"
    fi
}

# Define groups of file extensions
PLAIN_TEXT_EXTENSIONS="txt,md,log,csv,json,xml,yaml,yml,ini"
VIDEO_EXTENSIONS="mp4,mkv,avi,mov,flv,wmv,webm"
AUDIO_EXTENSIONS="mp3,wav,flac,aac,ogg,m4a"
IMAGE_EXTENSIONS="jpg,jpeg,png,gif,bmp,tiff,svg,webp"
CODE_EXTENSIONS="html,css,js,ts,jsx,tsx,c,h,cpp,hpp,java,php,rb,pl,swift,py,sh,bash,zsh,go,rs,lua,sql,r,jl,m,mm"

# Check if BUNDLE_ID/PRETTY_NAME and EXTENSIONS are provided as arguments
if [ -z "$1" ] || [ -z "$2" ]; then
    echo "Usage: $0 <BUNDLE_ID or PRETTY_NAME> <EXTENSIONS_GROUP or comma-separated extensions>"
    echo "Available groups: plain, video, audio, image, code"
    exit 1
fi

# Determine if the input is a BUNDLE_ID or PRETTY_NAME
if [[ "$1" =~ ^[a-zA-Z0-9.-]+$ ]]; then
    # Likely a BUNDLE_ID
    BUNDLE_ID="$1"
    PRETTY_NAME=$(get_pretty_name "$BUNDLE_ID")
else
    # Likely a PRETTY_NAME
    PRETTY_NAME="$1"
    BUNDLE_ID=$(get_bundle_id "$PRETTY_NAME")
    if [[ "$BUNDLE_ID" == "Unknown Application" ]]; then
        echo "Error: Could not find an application with the name '$PRETTY_NAME'."
        exit 1
    fi
fi

# Determine extensions based on the provided argument
case "$2" in
    plain) EXTENSIONS="$PLAIN_TEXT_EXTENSIONS" ;;
    video) EXTENSIONS="$VIDEO_EXTENSIONS" ;;
    audio) EXTENSIONS="$AUDIO_EXTENSIONS" ;;
    image) EXTENSIONS="$IMAGE_EXTENSIONS" ;;
    code) EXTENSIONS="$CODE_EXTENSIONS" ;;
    *) EXTENSIONS="$2" ;;
esac

IFS=',' read -r -a EXTENSIONS <<< "$EXTENSIONS"

# Set the application as the default for each extension
for ext in "${EXTENSIONS[@]}"; do
    current_app=$(duti -x .$ext 2>/dev/null | tail -n 1 | tr -d '[:space:]')
    
    if [[ -z "$current_app" ]]; then
        echo "Warning: No default application found for .$ext. Trying to set it anyway."
    elif [[ "$current_app" == "$BUNDLE_ID" ]]; then
        echo -e " 游릭游리 \033[1m.$ext\033[0m is already set to $PRETTY_NAME ($BUNDLE_ID)"
        continue
    fi
    
    duti -s "$BUNDLE_ID" ".$ext" all 2>/dev/null
    new_app=$(duti -x .$ext 2>/dev/null | tail -n 1 | tr -d '[:space:]')
    
    if [[ "$new_app" == "$BUNDLE_ID" ]]; then
        echo -e " 游릭游릭 \033[1m.$ext\033[0m set to $PRETTY_NAME ($BUNDLE_ID)!"
    else
        echo -e " 游댮游댮 \033[1m.$ext\033[0m cannot set $PRETTY_NAME ($BUNDLE_ID)! current default is $current_app!"
    fi
done

# Force update Launch Services
echo "Refreshing Launch Services..."
/System/Library/Frameworks/CoreServices.framework/Frameworks/LaunchServices.framework/Support/lsregister -r -f /Applications/

echo "All file associations updated successfully!"

echo "Debug: app_path = $app_path"
